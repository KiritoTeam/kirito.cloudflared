client = require("./index");
const Cloudflared = require('kirito.cloudflared.subservice');
// Script by CroneGamesPlays Developer, NeoKurai Studios $ Adss Group Corporation ¬© 2020 - 2024 √ó Todos os direitos reservados.

//const axios = require('axios');
//const fetch = require("node-fetch");

class Server {
    
  constructor() {
    // Voc√™ pode inicializar inst√¢ncias aqui, se necess√°rio
  }

  //M√©todos da class do KiritoAPI

async start(p) {
    try {
const portpri = p
if (!portpri) {
      throw new Error("Voc√™ deve informar qual e porta que seu servidor web usar");
    }      
async function startTunnel(port) {
  try {      
    const bin = await Cloudflared.install_cloudflared();
    if (!bin) {
      console.error("‚ùå N√£o foi poss√≠vel instalar o bin√°rio do cloudflared.");
      return;
    }

    const tunnel = new Cloudflared(`http://localhost:${port}`);

    tunnel.on("ready", (info) => {
      console.log(`‚úÖ Cloudflare Tunnel pronto: ${info.url}`);
    });

    tunnel.on("subservice", (info) => {
      console.log(`üîπ Subservi√ßo dispon√≠vel: [${info.type}] ${info.url}`);
    });

    tunnel.on("timeout", () => {
      console.error("‚ùå Timeout ao iniciar o t√∫nel Cloudflare: Tunnel could not be started within o tempo limite.");
    });

    tunnel.on("error", (err) => {
      console.error("‚ùå Erro ao iniciar t√∫nel Cloudflare:", err);
    });

    await tunnel.start(120000); // 2 minutos
  } catch (err) {
    console.error("‚ùå Erro ao iniciar t√∫nel:", err.message);
  }
}

// Exemplo de uso
startTunnel(portpri);
      
    } catch(error){
    throw new Error("Erro: "+ error.message)   
    }
  };
  
}



module.exports = Server;

require("./update");


process.on("uncaughtException", (err) => {
  console.log("Exce√ß√£o n√£o capturada: " + err);
});

process.on("unhandledRejection", (reason, promise) => {
  console.log("[GRAVE] Rejei√ß√£o possivelmente n√£o tratada em: Promise ", promise, " motivo: ", reason.message);
});
